openapi: 3.1.0
info:
  title: JSA from Photos API
  version: "1.0.0"
  description: Actions for a Job Safety Analysis app: analyze site photos and render a JSA PDF.
servers:
  - url: https://jsagent.onrender.com/api   # <-- change for local: http://localhost:8080/api
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
  schemas:
    PhotoAnalysisRequest:
      type: object
      required: [fileUrls]
      properties:
        fileUrls:
          type: array
          minItems: 1
          items: { type: string, format: uri }
        jobContext:
          type: object
          properties:
            task: { type: string }
            location: { type: string }
            environment: { type: string, description: "indoor/outdoor/weather" }
            equipment: { type: array, items: { type: string } }
    HazardItem:
      type: object
      required: [category, specific_risk, recommended_controls, required_PPE]
      properties:
        category: { type: string, description: "e.g., Fall, Electrical, Struck-by" }
        specific_risk: { type: string }
        likelihood: { type: string, enum: [low, medium, high] }
        potential_severity: { type: string, enum: [low, medium, high] }
        recommended_controls: { type: array, items: { type: string } }
        required_PPE: { type: array, items: { type: string } }
        references: { type: array, items: { type: string } }
    PhotoAnalysisResponse:
      type: object
      required: [summary, hazards]
      properties:
        summary: { type: string }
        hazards:
          type: array
          items: { $ref: '#/components/schemas/HazardItem' }
    RenderJsaRequest:
      type: object
      required: [job, hazards]
      properties:
        job:
          type: object
          required: [company, task, date, location]
          properties:
            company: { type: string }
            task: { type: string }
            date: { type: string, format: date }
            location: { type: string }
            supervisor: { type: string }
            crew: { type: array, items: { type: string } }
        hazards:
          type: array
          minItems: 1
          items: { $ref: '#/components/schemas/HazardItem' }
        verificationChecklist: { type: array, items: { type: string } }
        notes: { type: string }
    RenderJsaResponse:
      type: object
      required: [fileUrl]
      properties:
        fileUrl: { type: string, format: uri }
paths:
  /vision/analyze:
    post:
      operationId: analyzePhotos
      summary: Analyze site photos and return structured hazards
      security: [{ ApiKeyAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PhotoAnalysisRequest' }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PhotoAnalysisResponse' }
        "400": { description: Bad Request }
        "401": { description: Unauthorized }
        "429": { description: Rate limited }
        "500": { description: Server error }
  /jsa/render:
    post:
      operationId: renderJsaPdf
      summary: Render a Job Safety Analysis PDF and return a signed file URL
      security: [{ ApiKeyAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RenderJsaRequest' }
      responses:
        "200":
          description: PDF created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/RenderJsaResponse' }
        "400": { description: Bad Request }
        "401": { description: Unauthorized }
        "429": { description: Rate limited }
        "500": { description: Server error }
